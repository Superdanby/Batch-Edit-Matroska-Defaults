#!/bin/bash
# https://github.com/Superdanby/Batch-Edit-Matroska-Defaults

# Created by argbash-init v2.5.0
# ARG_OPTIONAL_SINGLE([path],[],[Matroska files' directory])
# ARG_OPTIONAL_SINGLE([fa],[],[Current default audio track])
# ARG_OPTIONAL_SINGLE([ta],[],[Target subtitle track])
# ARG_OPTIONAL_SINGLE([fs],[],[Current default subtitle track])
# ARG_OPTIONAL_SINGLE([ts],[],[Target subtitle track])
# ARG_HELP([This script uses mkvpropedit to modify the default track settings of all Matroska files in the specified path.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.5.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_path=
_arg_fa=
_arg_ta=
_arg_fs=
_arg_ts=

print_help ()
{
	printf "%s\n" "This script uses mkvpropedit to modify the default track settings of all Matroska files in the specified path."
	printf 'Usage: %s [--path <arg>] [--fa <arg>] [--ta <arg>] [--fs <arg>] [--ts <arg>] [-h|--help]\n' "$0"
	printf "\t%s\n" "--path: Matroska files' directory (no default)"
	printf "\t%s\n" "--fa: Current default audio track (no default)"
	printf "\t%s\n" "--ta: Target subtitle track (no default)"
	printf "\t%s\n" "--fs: Current default subtitle track (no default)"
	printf "\t%s\n" "--ts: Target subtitle track (no default)"
	printf "\t%s\n" "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--path)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_path="$2"
				shift
				;;
			--path=*)
				_arg_path="${_key##--path=}"
				;;
			--fa)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fa="$2"
				shift
				;;
			--fa=*)
				_arg_fa="${_key##--fa=}"
				;;
			--ta)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ta="$2"
				shift
				;;
			--ta=*)
				_arg_ta="${_key##--ta=}"
				;;
			--fs)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_fs="$2"
				shift
				;;
			--fs=*)
				_arg_fs="${_key##--fs=}"
				;;
			--ts)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ts="$2"
				shift
				;;
			--ts=*)
				_arg_ts="${_key##--ts=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


if [[ $_arg_path == /* ]]; then
    echo "Value of --path: $_arg_path"
else
    echo "Value of --path: `pwd`/$_arg_path"
fi
echo "Value of --fa: a$_arg_fa"
echo "Value of --ta: a$_arg_ta"
echo "Value of --fs: s$_arg_fs"
echo "Value of --ts: s$_arg_ts"

if ! [[ -d "$_arg_path" ]]; then
    echo "Invalid directory!"
    exit 1
fi

printf "Do you wish to proceed?\n"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) break;;
        No ) exit;;
    esac
done

for f in "$_arg_path"/*.mkv
do
    if ! [[ $_arg_fa == "" && $_arg_fs == "" ]]; then
        mkvpropedit "$f" --edit track:a$_arg_fa --set flag-default=0 --edit track:a$_arg_ta --set flag-default=1 --edit track:s$_arg_fs --set flag-default=0 --edit track:s$_arg_ts --set flag-default=1
    elif ! [[ $_arg_fa == "" ]]; then
        mkvpropedit "$f" --edit track:a$_arg_fa --set flag-default=0 --edit track:a$_arg_ta --set flag-default=1
    elif ! [[ $_arg_fs == "" ]]; then
        mkvpropedit "$f" --edit track:s$_arg_fs --set flag-default=0 --edit track:s$_arg_ts --set flag-default=1
    fi
done

# ] <-- needed because of Argbash
